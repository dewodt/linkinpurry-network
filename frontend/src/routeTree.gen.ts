/* eslint-disable */
// @ts-nocheck
// noinspection JSUnusedGlobalSymbols
// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.
// Import Routes
import { Route as rootRoute } from './routes/__root';
import { Route as AuthImport } from './routes/_auth';
import { Route as AuthAuthLoginImport } from './routes/_auth/auth/login';
import { Route as AuthAuthRegisterImport } from './routes/_auth/auth/register';
import { Route as IndexImport } from './routes/index';
import { Route as MyNetworkIndexImport } from './routes/my-network/index';
import { Route as UsersUserIdConnectionsIndexImport } from './routes/users/$userId/connections/index';
import { Route as UsersUserIdIndexImport } from './routes/users/$userId/index';

// Create/Update Routes

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any);

const MyNetworkIndexRoute = MyNetworkIndexImport.update({
  id: '/my-network/',
  path: '/my-network/',
  getParentRoute: () => rootRoute,
} as any);

const UsersUserIdIndexRoute = UsersUserIdIndexImport.update({
  id: '/users/$userId/',
  path: '/users/$userId/',
  getParentRoute: () => rootRoute,
} as any);

const AuthAuthRegisterRoute = AuthAuthRegisterImport.update({
  id: '/auth/register',
  path: '/auth/register',
  getParentRoute: () => AuthRoute,
} as any);

const AuthAuthLoginRoute = AuthAuthLoginImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => AuthRoute,
} as any);

const UsersUserIdConnectionsIndexRoute = UsersUserIdConnectionsIndexImport.update({
  id: '/users/$userId/connections/',
  path: '/users/$userId/connections/',
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    '/_auth': {
      id: '/_auth';
      path: '';
      fullPath: '';
      preLoaderRoute: typeof AuthImport;
      parentRoute: typeof rootRoute;
    };
    '/my-network/': {
      id: '/my-network/';
      path: '/my-network';
      fullPath: '/my-network';
      preLoaderRoute: typeof MyNetworkIndexImport;
      parentRoute: typeof rootRoute;
    };
    '/_auth/auth/login': {
      id: '/_auth/auth/login';
      path: '/auth/login';
      fullPath: '/auth/login';
      preLoaderRoute: typeof AuthAuthLoginImport;
      parentRoute: typeof AuthImport;
    };
    '/_auth/auth/register': {
      id: '/_auth/auth/register';
      path: '/auth/register';
      fullPath: '/auth/register';
      preLoaderRoute: typeof AuthAuthRegisterImport;
      parentRoute: typeof AuthImport;
    };
    '/users/$userId/': {
      id: '/users/$userId/';
      path: '/users/$userId';
      fullPath: '/users/$userId';
      preLoaderRoute: typeof UsersUserIdIndexImport;
      parentRoute: typeof rootRoute;
    };
    '/users/$userId/connections/': {
      id: '/users/$userId/connections/';
      path: '/users/$userId/connections';
      fullPath: '/users/$userId/connections';
      preLoaderRoute: typeof UsersUserIdConnectionsIndexImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

interface AuthRouteChildren {
  AuthAuthLoginRoute: typeof AuthAuthLoginRoute;
  AuthAuthRegisterRoute: typeof AuthAuthRegisterRoute;
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthAuthLoginRoute: AuthAuthLoginRoute,
  AuthAuthRegisterRoute: AuthAuthRegisterRoute,
};

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren);

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '': typeof AuthRouteWithChildren;
  '/my-network': typeof MyNetworkIndexRoute;
  '/auth/login': typeof AuthAuthLoginRoute;
  '/auth/register': typeof AuthAuthRegisterRoute;
  '/users/$userId': typeof UsersUserIdIndexRoute;
  '/users/$userId/connections': typeof UsersUserIdConnectionsIndexRoute;
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '': typeof AuthRouteWithChildren;
  '/my-network': typeof MyNetworkIndexRoute;
  '/auth/login': typeof AuthAuthLoginRoute;
  '/auth/register': typeof AuthAuthRegisterRoute;
  '/users/$userId': typeof UsersUserIdIndexRoute;
  '/users/$userId/connections': typeof UsersUserIdConnectionsIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/': typeof IndexRoute;
  '/_auth': typeof AuthRouteWithChildren;
  '/my-network/': typeof MyNetworkIndexRoute;
  '/_auth/auth/login': typeof AuthAuthLoginRoute;
  '/_auth/auth/register': typeof AuthAuthRegisterRoute;
  '/users/$userId/': typeof UsersUserIdIndexRoute;
  '/users/$userId/connections/': typeof UsersUserIdConnectionsIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: '/' | '' | '/my-network' | '/auth/login' | '/auth/register' | '/users/$userId' | '/users/$userId/connections';
  fileRoutesByTo: FileRoutesByTo;
  to: '/' | '' | '/my-network' | '/auth/login' | '/auth/register' | '/users/$userId' | '/users/$userId/connections';
  id: '__root__' | '/' | '/_auth' | '/my-network/' | '/_auth/auth/login' | '/_auth/auth/register' | '/users/$userId/' | '/users/$userId/connections/';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  AuthRoute: typeof AuthRouteWithChildren;
  MyNetworkIndexRoute: typeof MyNetworkIndexRoute;
  UsersUserIdIndexRoute: typeof UsersUserIdIndexRoute;
  UsersUserIdConnectionsIndexRoute: typeof UsersUserIdConnectionsIndexRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  MyNetworkIndexRoute: MyNetworkIndexRoute,
  UsersUserIdIndexRoute: UsersUserIdIndexRoute,
  UsersUserIdConnectionsIndexRoute: UsersUserIdConnectionsIndexRoute,
};

export const routeTree = rootRoute._addFileChildren(rootRouteChildren)._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth",
        "/my-network/",
        "/users/$userId/",
        "/users/$userId/connections/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/auth/login",
        "/_auth/auth/register"
      ]
    },
    "/my-network/": {
      "filePath": "my-network/index.tsx"
    },
    "/_auth/auth/login": {
      "filePath": "_auth/auth/login.tsx",
      "parent": "/_auth"
    },
    "/_auth/auth/register": {
      "filePath": "_auth/auth/register.tsx",
      "parent": "/_auth"
    },
    "/users/$userId/": {
      "filePath": "users/$userId/index.tsx"
    },
    "/users/$userId/connections/": {
      "filePath": "users/$userId/connections/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
