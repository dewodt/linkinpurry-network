/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthImport } from './routes/_auth'
import { Route as IndexImport } from './routes/index'
import { Route as MyNetworksUserIdImport } from './routes/my-networks/$userId'
import { Route as UsersUserIdIndexImport } from './routes/users/$userId/index'
import { Route as MyNetworksConnectinRequestUserIdImport } from './routes/my-networks/connectin-request/$userId'
import { Route as AuthAuthRegisterIndexImport } from './routes/_auth/auth/register/index'
import { Route as AuthAuthLoginIndexImport } from './routes/_auth/auth/login/index'

// Create/Update Routes

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const MyNetworksUserIdRoute = MyNetworksUserIdImport.update({
  id: '/my-networks/$userId',
  path: '/my-networks/$userId',
  getParentRoute: () => rootRoute,
} as any)

const UsersUserIdIndexRoute = UsersUserIdIndexImport.update({
  id: '/users/$userId/',
  path: '/users/$userId/',
  getParentRoute: () => rootRoute,
} as any)

const MyNetworksConnectinRequestUserIdRoute =
  MyNetworksConnectinRequestUserIdImport.update({
    id: '/my-networks/connectin-request/$userId',
    path: '/my-networks/connectin-request/$userId',
    getParentRoute: () => rootRoute,
  } as any)

const AuthAuthRegisterIndexRoute = AuthAuthRegisterIndexImport.update({
  id: '/auth/register/',
  path: '/auth/register/',
  getParentRoute: () => AuthRoute,
} as any)

const AuthAuthLoginIndexRoute = AuthAuthLoginIndexImport.update({
  id: '/auth/login/',
  path: '/auth/login/',
  getParentRoute: () => AuthRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/my-networks/$userId': {
      id: '/my-networks/$userId'
      path: '/my-networks/$userId'
      fullPath: '/my-networks/$userId'
      preLoaderRoute: typeof MyNetworksUserIdImport
      parentRoute: typeof rootRoute
    }
    '/my-networks/connectin-request/$userId': {
      id: '/my-networks/connectin-request/$userId'
      path: '/my-networks/connectin-request/$userId'
      fullPath: '/my-networks/connectin-request/$userId'
      preLoaderRoute: typeof MyNetworksConnectinRequestUserIdImport
      parentRoute: typeof rootRoute
    }
    '/users/$userId/': {
      id: '/users/$userId/'
      path: '/users/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof UsersUserIdIndexImport
      parentRoute: typeof rootRoute
    }
    '/_auth/auth/login/': {
      id: '/_auth/auth/login/'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthAuthLoginIndexImport
      parentRoute: typeof AuthImport
    }
    '/_auth/auth/register/': {
      id: '/_auth/auth/register/'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthAuthRegisterIndexImport
      parentRoute: typeof AuthImport
    }
  }
}

// Create and export the route tree

interface AuthRouteChildren {
  AuthAuthLoginIndexRoute: typeof AuthAuthLoginIndexRoute
  AuthAuthRegisterIndexRoute: typeof AuthAuthRegisterIndexRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthAuthLoginIndexRoute: AuthAuthLoginIndexRoute,
  AuthAuthRegisterIndexRoute: AuthAuthRegisterIndexRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthRouteWithChildren
  '/my-networks/$userId': typeof MyNetworksUserIdRoute
  '/my-networks/connectin-request/$userId': typeof MyNetworksConnectinRequestUserIdRoute
  '/users/$userId': typeof UsersUserIdIndexRoute
  '/auth/login': typeof AuthAuthLoginIndexRoute
  '/auth/register': typeof AuthAuthRegisterIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthRouteWithChildren
  '/my-networks/$userId': typeof MyNetworksUserIdRoute
  '/my-networks/connectin-request/$userId': typeof MyNetworksConnectinRequestUserIdRoute
  '/users/$userId': typeof UsersUserIdIndexRoute
  '/auth/login': typeof AuthAuthLoginIndexRoute
  '/auth/register': typeof AuthAuthRegisterIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteWithChildren
  '/my-networks/$userId': typeof MyNetworksUserIdRoute
  '/my-networks/connectin-request/$userId': typeof MyNetworksConnectinRequestUserIdRoute
  '/users/$userId/': typeof UsersUserIdIndexRoute
  '/_auth/auth/login/': typeof AuthAuthLoginIndexRoute
  '/_auth/auth/register/': typeof AuthAuthRegisterIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/my-networks/$userId'
    | '/my-networks/connectin-request/$userId'
    | '/users/$userId'
    | '/auth/login'
    | '/auth/register'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/my-networks/$userId'
    | '/my-networks/connectin-request/$userId'
    | '/users/$userId'
    | '/auth/login'
    | '/auth/register'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/my-networks/$userId'
    | '/my-networks/connectin-request/$userId'
    | '/users/$userId/'
    | '/_auth/auth/login/'
    | '/_auth/auth/register/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRouteWithChildren
  MyNetworksUserIdRoute: typeof MyNetworksUserIdRoute
  MyNetworksConnectinRequestUserIdRoute: typeof MyNetworksConnectinRequestUserIdRoute
  UsersUserIdIndexRoute: typeof UsersUserIdIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  MyNetworksUserIdRoute: MyNetworksUserIdRoute,
  MyNetworksConnectinRequestUserIdRoute: MyNetworksConnectinRequestUserIdRoute,
  UsersUserIdIndexRoute: UsersUserIdIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth",
        "/my-networks/$userId",
        "/my-networks/connectin-request/$userId",
        "/users/$userId/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/auth/login/",
        "/_auth/auth/register/"
      ]
    },
    "/my-networks/$userId": {
      "filePath": "my-networks/$userId.tsx"
    },
    "/my-networks/connectin-request/$userId": {
      "filePath": "my-networks/connectin-request/$userId.tsx"
    },
    "/users/$userId/": {
      "filePath": "users/$userId/index.tsx"
    },
    "/_auth/auth/login/": {
      "filePath": "_auth/auth/login/index.tsx",
      "parent": "/_auth"
    },
    "/_auth/auth/register/": {
      "filePath": "_auth/auth/register/index.tsx",
      "parent": "/_auth"
    }
  }
}
ROUTE_MANIFEST_END */
